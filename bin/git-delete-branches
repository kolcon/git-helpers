#!/usr/bin/env perl

use strict;
use warnings;

use Capture::Tiny qw( capture );
use Git::Sub;
use String::Trim qw( trim );
use Term::UI;
use Term::ReadLine ();

my $term = Term::ReadLine->new('brand');

## no critic (ControlStructures::ProhibitMutatingListFunctions)

# Don't include the branch we're currently on
my @branches
    = map { trim($_) } grep { !m{^\*} } git::branch( '--no-color', '--all' );

## use critic

my @reply = $term->get_reply(
    choices => \@branches,
    multi   => 1,
    prompt  => 'Which branch(es) would you like to delete?',
);

for my $branch (@reply) {
    my @to_delete = ($branch);

    #if ( my @remotes = remotes($branch) ) {
        #@to_delete = $term->get_reply(
            #choices => [ $branch, @remotes ],
            #multi   => 1,
            #prompt  => 'Which branches would you like to delete?',
        #);

    #}
    use feature qw( say );

    for my $name (@to_delete) {
        say $name;
        my $is_remote = $name =~ s{\Aremotes/}{};
        say $name;
        say $is_remote;

        if ( my $stderr
            = delete_branch( $is_remote ? ('--remotes') : (), $name ) )
        {

            if ( $stderr =~ m{not fully merged} ) {

                my $prompt = <<"EOF";
Branch $branch is not fully merged. Would you still like to delete it?",
EOF

                my $reply = $term->get_reply(
                    choices => [ 'Yes', 'No' ],
                    prompt  => $prompt,
                );

                if ( $reply eq 'Yes' ) {
                    my $stderr = delete_branch( '--force', $name );
                    print "$stderr\n" if $stderr;
                }
            }
            else {
                print "$stderr\n";
            }
        }
    }
}

sub delete_branch {
    use DDP;
    my @args = @_;
    unshift @args, '--delete';
    p @args;
    my ( undef, $stderr ) = capture {
        eval { git::branch(@args) };
    };

    return $stderr;
}

sub remotes {
    my $branch = shift;
    my @remotes = map { trim($_) } git::branch( '-r', '--contains', $branch );
    return @remotes;
}
